syntax = "proto3";

package hashmap;


service HashmapService {
    rpc Put(PutRequest) returns (PutResponse);
    rpc Get(GetRequest) returns (GetResponse);
    rpc Erase(EraseRequest) returns (EraseResponse);
    rpc ForwardedPut(ForwardPutRequest) returns (ForwardPutResponse);
    rpc ForwardedGet(ForwardGetRequest) returns (ForwardGetResponse);
    rpc ForwardedErase(ForwardEraseRequest) returns (ForwardEraseResponse);
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
}

// Message to represent a key-value pair
message KeyValue {
    string key = 1;      // The key in the hashmap
    string value = 2;    // The value associated with the key
}

// Request message for adding or updating a key-value pair
message PutRequest {
    KeyValue kv = 1;     // The key-value pair to add or update
}

// Response message for the PutRequest
message PutResponse {
    bool success = 1;    // Indicates if the operation was successful
}

// Request message for retrieving a value by key
message GetRequest {
    string key = 1;      // The key to retrieve
}

// Response message for the GetRequest
message GetResponse {
    string value = 1;    // The value associated with the key
    bool found = 2;      // Indicates if the key was found
}

// Request message for deleting a key-value pair
message EraseRequest {
    string key = 1;      // The key to delete
}

// Response message for the DeleteRequest
message EraseResponse {
    bool success = 1;    // Indicates if the deletion was successful
}

// Request message for forwarding a Get request to another server
message ForwardGetRequest {
    string key = 1; // The key to retrieve
}

// Response message for the ForwardGetRequest
message ForwardGetResponse {
    string value = 1; // The value associated with the key
    bool found = 2;   // Indicates if the key was found
}

// Request message for forwarding a Put request to another server
message ForwardPutRequest {
    KeyValue kv = 1; // The key-value pair to add or update
}

// Response message for the ForwardPutRequest
message ForwardPutResponse {
    bool success = 1; // Indicates if the operation was successful
}

// Request message for forwarding an Erase request to another server
message ForwardEraseRequest {
    string key = 1; // The key to delete
}

// Response message for the ForwardEraseRequest
message ForwardEraseResponse {
    bool success = 1; // Indicates if the deletion was successful
}

message RequestVoteRequest {
    int32 term = 1;
    string candidate_name = 2;
    int32 last_log_index = 3;
    int32 last_log_term = 4;
}

message RequestVoteResponse {
    bool vote_granted = 1;
}

message LogEntry {
    int32 term = 1;
    string key = 2;
    string value = 3;
    string opType = 4;
}

message AppendEntriesRequest {
    int32 term = 1;
    string leader_name = 2;
    repeated LogEntry entries = 3;
    int32 commit_index = 4;

}

message AppendEntriesResponse {
    bool success = 1;
}